interface Node {
  id: ID!
}

type User {
  id: ID!
  email: String!
  name: String
  boards: [Board!]!
}

type Card {
  id: ID!
  title: String!
  description: String!
  tags: [Tag!]!
  comments: [Comment!]!
  position: Int!
  imageUrl: String
  createdAt: String!
  updatedAt: String!
  column: Column!
}

type Tag {
  id: ID!
  name: String!
  cards: [Card!]!
}

type Comment {
  id: ID!
  content: String!
  card: Card!
  createdAt: String!
  updatedAt: String!
}

type Column implements Node {
  id: ID!
  name: String!
  position: Int!
  board: Board!
  cards: [Card!]!
}

type Board {
  id: ID!
  name: String!
  columns: [Column!]!
}

type Query {
  boards: [Board!]!
  board(id: ID!): Board!
  column(id: ID!): Column!
  node(id: ID!): Node
  currentUser: User
  tags: [Tag!]!
  comments(cardId: ID!): [Comment!]!
}

type Mutation {
  signUp(email: String!, name: String): User
  signIn(email: String!): User

  createBoard(name: String!): Board!

  createSimpleCard(columnId: ID!, title: String!): Card!

  createColumn(boardId: ID!, name: String!, position: Int!): Column!

  deleteCard(cardId: ID!): Card!
  updateCard(cardId: ID!, title: String!, description: String!, imageUrl: String): Card!
  moveCard(cardId: ID!, targetColumnId: ID!, targetPosition: Int!): Card!

  addTagToCard(cardId: ID!, tagName: String!): Card!
  removeTagFromCard(cardId: ID!, tagId: ID!): Card!
  addCommentToCard(cardId: ID!, content: String!): Comment!
}
