interface Node {
  id: ID!
}

type User {
  id: ID!
  email: String!
  name: String
  avatarUrl: String
  comments: [Comment!]!
  boards: [Board!]!
  collaborations: [Board!]!
  favorites: [Board!]!
}

type Board {
  id: ID!
  name: String!
  user: User!
  imageUrl: String
  collaborators: [User!]!
  favoritedBy: [User!]!
  columns: [Column!]!
}

type Card {
  id: ID!
  title: String!
  description: String!
  imageUrl: String
  tags: [Tag!]!
  comments: [Comment!]!
  position: Int!
  column: Column!
  createdAt: String!
  updatedAt: String!
}

type Tag {
  id: ID!
  name: String!
  cards: [Card!]!
}

type Comment {
  id: ID!
  content: String!
  card: Card!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Column implements Node {
  id: ID!
  name: String!
  position: Int!
  board: Board!
  cards: [Card!]!
}

type Query {
  boards: [Board!]!
  collaborateBoards: [Board]!
  favoriteBoards: [Board]!
  board(id: ID!): Board!
  collaborators(boardId: ID!): [User!]!
  column(id: ID!): Column!
  card(id: ID!): Card!
  node(id: ID!): Node
  currentUser: User
  tags: [Tag!]!
  comments(cardId: ID!): [Comment!]!
}

type Mutation {
  createBoard(name: String!): Board!
  toggleFavoriteBoard(boardId: ID!): Board!
  updateBoardImageUrl(boardId: ID!, imageUrl: String!): Board!
  updateBoardName(boardId: ID!, name: String!): Board!

  createColumn(boardId: ID!, name: String!, position: Int!): Column!

  createSimpleCard(columnId: ID!, title: String!): Card!
  createCardFromComment(cardId: ID!, title: String!, description: String!): Card!
  deleteCard(cardId: ID!): Card!

  # instead use these granular ones
  updateCardTitle(cardId: ID!, title: String!): Card!
  updateCardDescription(cardId: ID!, description: String!): Card!
  updateCardImageUrl(cardId: ID!, imageUrl: String!): Card!

  moveCard(cardId: ID!, targetColumnId: ID!, targetPosition: Int!): Card!

  createTag(name: String!): Tag!
  addTagToCard(cardId: ID!, tagId: ID!): Card!
  removeTagFromCard(cardId: ID!, tagId: ID!): Card!

  addCommentToCard(cardId: ID!, content: String!): Comment!
  removeComment(commentId: ID!): Comment!
}
